express → Framework to build APIs
cors → Allows React to communicate with Node.js (CORS policy)
mongoose → Connects to MongoDB
dotenv → Loads environment variables

What is Express.js?
Express.js is a fast, minimal, and flexible Node.js web framework.
It helps in building backend APIs and web applications easily.
Provides powerful routing, middleware support, and simplifies handling requests & responses.

What is Mongoose?
Mongoose is an ODM (Object Data Modeling) library for MongoDB in Node.js.
It helps in interacting with MongoDB using JavaScript objects instead of raw queries.
Provides schema-based structure to define how data should be stored in MongoDB.


CORS (Cross-Origin Resource Sharing) is a security mechanism implemented by web browsers to restrict web pages from making requests to a different domain than the one that served the web page. In the context of React applications, CORS is crucial when the application needs to communicate with a backend API hosted on a different domain.

Introduction to dotenv
Explaining why we need dotenv in backend development:

When building applications, we often use sensitive data like database credentials, API keys, or secret tokens.
Storing these directly in the code is unsafe and can lead to security issues if shared publicly.
The .env file helps us store such sensitive information securely and separately.

A server is a computer or system that provides services, resources, or data to other computers (clients) over a network. It can be physical hardware or a cloud-based virtual machine.
Types of Servers:
	1.	Web Server – Hosts websites (e.g., Apache, Nginx).
	2.	Database Server – Stores and manages databases (e.g., MongoDB, MySQL).
	3.	Application Server – Runs applications (e.g., Node.js, Express.js).
	4.	File Server – Stores and shares files over a network.
	5.	Cloud Server – A virtual server hosted on the cloud (e.g., AWS, Google Cloud).
Example in MongoDB Context:
	•	If you install MongoDB on your local machine, your computer acts as a MongoDB server.
	•	If you use MongoDB Atlas, your database is hosted on a cloud server managed by MongoDB.

**********MongoDB Connection String Format**************

To connect a Node.js app to MongoDB Atlas, use the following format:

mongodb+srv://<username>:<password>@cluster0.xxxxx.mongodb.net/<database-name>?retryWrites=true&w=majority

Explanation:
- <username>→ Your MongoDB Atlas username.
- <password> → Your password (avoid special characters like @, :, / without encoding).
- cluster0.xxxxx.mongodb.net→ Your MongoDB cluster address.
- <database-name> → The name of your database.

Example:
If your username is studentUser, password is pass123, and database is studentDB, then:

mongodb+srv://<username>:<password>@cluster0.xxxxx.mongodb.net/myDatabase?retryWrites=true&w=majority
MONGO_URI=mongodb+srv://studentUser:pass123@cluster0.xxxxx.mongodb.net/studentDB?retryWrites=true&w=majority


Best Practices:
- Store the connection string in a .env file, not in your code.
- Use the dotenv package to load environment variables

**************MongoDB URI vs. URL************

What is a URI?
A URI (Uniform Resource Identifier) is a general identifier for a resource. It can refer to a location (URL) or a name (URN).

Example of a MongoDB URI:

mongodb+srv://username:password@cluster0.mongodb.net/myDatabase

In MongoDB, the *connection string is called a URI* because it identifies the database location *and* includes authentication details.

What is a URL?
A *URL (Uniform Resource Locator)* is a specific type of URI that provides a way to locate a resource, usually with a network address and protocol.

Example of a URL:

https://www.mongodb.com/docs/

This is a *URL* because it tells the browser exactly where to go on the web.

Why Does MongoDB Use "URI" Instead of "URL"?
- A MongoDB *connection string* does not just specify a location; it also includes authentication details and options.
- Because it is more than just a "locator," it is referred to as a *MongoDB URI* instead of a URL.

Summary:
- *Use "MongoDB URI"* when referring to your *database connection string*.
- *Use "URL"* when referring to a *web address*.

This distinction helps in understanding how MongoDB connections work.

**********************SQL vs NoSQL Databases**********************

SQL (Structured Query Language) Databases
Relational database (stores data in tables with rows and columns).
Uses SQL to query and manage data.
Schema-based (fixed structure, predefined columns).
Best for structured data with strong relationships.
Examples: MySQL, PostgreSQL, SQLite, Microsoft SQL Server.

Example Table (Students Table in SQL)

ID	Name	Age	Course
1	Faris	24	React
2	Ali	22	Node.js

SQL Query Example

SELECT * FROM Students WHERE Age > 22;

NoSQL (Not Only SQL) Databases
Non-relational database (stores data in flexible formats like JSON, key-value, graphs, or columns).
No fixed schema (good for dynamic or unstructured data).
Can handle large-scale distributed data.
Best for big data, real-time applications, and flexible schemas.
Examples: MongoDB, Firebase, Cassandra, Redis.

Example Document (Students Collection in MongoDB NoSQL)

{
  "_id": "1",
  "name": "Faris",
  "age": 24,
  "course": "React"
}

MongoDB Query Example

db.students.find({ age: { $gt: 22 } });
*******************************SQL vs NoSQL Comparison Table*********************************
Feature				      |	SQL (Relational)								              |	NoSQL (Non-Relational)
Structure			      |	Tables (rows & columns)							          |	JSON, Key-Value, Graph, Column-Family
Schema				      |	Fixed (Predefined structure)					        |	Flexible (Dynamic fields)
Scalability			    |	Vertical (Add more power to a single server)	|	Horizontal (Add more servers)
Data Relationships	|	Strong (Joins, Foreign Keys)					        |	Weak or No Relationships
Query Language		  |	SQL (Structured Query Language)					      |	NoSQL (APIs, JSON-based queries)
Best For			      |	Financial, Banking, Enterprise apps				    |	Real-time, Big Data, IoT, Social Media
Examples			      |	MySQL, PostgreSQL, SQL Server					        |	MongoDB, Firebase, Redis, Cassandra

**********************When to Use SQL or NoSQL?**********************
Use SQL if:
✅ You need structured data with fixed relationships.
✅ Your data requires ACID compliance (Atomicity, Consistency, Isolation, Durability).
✅ Examples: Banking, e-commerce, finance apps.

Use NoSQL if:
✅ Your data is semi-structured or unstructured.
✅ You need high-speed data processing (real-time applications).
✅ Examples: Chat apps, IoT, social media, gaming, analytics.

Final Thought
✅ SQL = Structured, Fixed Schema, Good for Relationships
✅ NoSQL = Flexible, Fast, Good for Large-Scale Applications


***************************Routes*************************
Understanding Routes, Starting the Server, and Using Nodemon in Express.js
When building an Express.js application, it’s essential to understand:
Routes: How to handle different requests (GET, POST, PUT, DELETE)
Starting the Server: How to run the server manually or automatically
Nodemon: How to restart the server automatically on code changes

1. What are Routes in Express.js?

Routes define how the application responds to client requests.
Basic Route Example:
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

const PORT = 5000;
app.listen(PORT, () => console.log(Server running on port ${PORT}));

app.get('/'): Handles GET requests to /
res.send('Hello, World!'): Sends a response to the client
app.listen(PORT, () => console.log(...)): Starts the server

2. Different Types of Routes

GET Route (Retrieve Data)
app.get('/students', (req, res) => {
  res.json([{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }]);
});

POST Route (Send Data)
app.post('/students', (req, res) => {
  res.json({ message: 'Student added successfully!' });
});

PUT Route (Update Data)
app.put('/students/:id', (req, res) => {
  res.json({ message: Student with ID ${req.params.id} updated });
});

DELETE Route (Remove Data)
app.delete('/students/:id', (req, res) => {
  res.json({ message: Student with ID ${req.params.id} deleted });
});

Now the API has:
/students (GET) → Fetch all students
/students (POST) → Add a new student
/students/:id (PUT) → Update a student
/students/:id (DELETE) → Delete a student

3. Organizing Routes Using Express Router

Instead of defining all routes in server.js, we can move them to a separate file.
Create routes/studentRoutes.js:
const express = require('express');
const router = express.Router();

// Define Routes
router.get('/', (req, res) => {
  res.json([{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }]);
});

router.post('/', (req, res) => {
  res.json({ message: 'Student added successfully!' });
});

router.put('/:id', (req, res) => {
  res.json({ message: Student with ID ${req.params.id} updated });
});

router.delete('/:id', (req, res) => {
  res.json({ message: Student with ID ${req.params.id} deleted });
});

// Export Router
module.exports = router;

Modify server.js to Use Routes:
const express = require('express');
const cors = require('cors');
const studentRoutes = require('./routes/studentRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// Use the student routes
app.use('/students', studentRoutes);

const PORT = 5000;
app.listen(PORT, () => console.log(Server running on port ${PORT}));

Now, all student-related routes are in a separate file and can be accessed via /students.

4. How to Start the Server?

Manually start the server:
node server.js

This starts the server, but if you change the code, you must restart it manually.

5. Using Nodemon (Auto Restart Server on Code Changes)

Nodemon automatically restarts the server when changes are made.
Install Nodemon
npm install -g nodemon

Or for project-only use:
npm install --save-dev nodemon

Run Server with Nodemon
nodemon server.js

Now, changes in your code will automatically restart the server.

6. Add Nodemon to package.json

Modify package.json:
"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}

Now, run the server with:
npm run dev

*************************Summary*************************

Routes handle different requests (GET, POST, PUT, DELETE)
Express Router helps organize routes in separate files
Start the server using node server.js
Use Nodemon (npm run dev) for automatic restarts