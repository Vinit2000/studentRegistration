
*****************************************************Express.js****************************************************************

In Express.js, the req (request) and res (response) objects provide various properties and methods for handling HTTP requests and responses.

1. The req (Request) Object
The req object represents the HTTP request and contains details such as the URL, headers, body, query parameters, etc.
Common req Properties & Methods
------------------------------------------------------------------------------------------------
Property/Method           |          Description                                                |
------------------------------------------------------------------------------------------------
req.url                   |          Full URL of the request.                                   |
req.method                |          HTTP method (GET, POST, etc.).                             |
req.params                |          URL parameters (e.g., :id in /user/:id).                   |
req.query                 |          Query parameters from the URL.                             |
req.body                  |          Request body (used in POST, PUT requests).                 |
req.headers               |          Headers sent by the client.                                |
req.cookies               |          Cookies sent with the request (if cookie-parser is used).  |
-------------------------------------------------------------------------------------------------

Example of req Object
app.get("/user/:id", (req, res) => {
  console.log("Request Object:", req);
  res.send("Check your console for the req object.");
});
If the client requests http://localhost:3000/user/123?role=admin, req contains:
{
  "url": "/user/123?role=admin",
  "method": "GET",
  "params": { "id": "123" },
  "query": { "role": "admin" },
  "headers": { "host": "localhost:3000", "user-agent": "Mozilla/5.0" }
}

2. The res (Response) Object
The res object is used to send a response back to the client.
Common res Methods
----------------------------------------------------------------------------
Method                     |     Description                                |
----------------------------------------------------------------------------
res.send(data)             |     Sends a response (text, HTML, or JSON).    |
res.json(object)           |     Sends a JSON response.                     |
res.status(code)           |     Sets the HTTP status code.                 |
res.redirect(url)          |     Redirects to another URL.                  |
res.sendFile(path)         |     Sends a file.                              |
res.cookie(name, val)      |     Sets a cookie (if cookie-parser is used).  |
-----------------------------------------------------------------------------

Example of res Object
app.get("/response", (req, res) => {
  res.status(200).json({
    message: "This is a JSON response",
    success: true
  });
});
Response:
{
  "message": "This is a JSON response",
  "success": true
}

Full Example: Logging req and res
const express = require("express");
const app = express();

app.get("/info", (req, res) => {
  console.log("Request Object:", req);
  console.log("Response Object:", res);
  
  res.send("Check the console for req and res objects.");
});

app.listen(3000, () => console.log("Server running on port 3000"));
	â€¢	Open http://localhost:3000/info and check the console for full request and response objects.

Key Takeaways
	â€¢	req contains request details (URL, params, query, headers, body).
	â€¢	res is used to send responses (HTML, JSON, redirects, files).
	â€¢	Logging req and res helps debug incoming requests and outgoing responses.

**********************************Why Do We Need a Mongoose Schema If We Validate in the API?**********************************

Even if we check for validation inside the POST function, we *still need a Mongoose schema*. Hereâ€™s why:  

1. *Ensures Data Structure*  
   - The schema makes sure that the data stored in MongoDB follows a proper structure (e.g., name must be a string).  

2. *Adds Extra Validation*  
   - Mongoose provides built-in checks like:  
     - *Type validation* (e.g., name must be a string)  
     - *Required fields* (e.g., name cannot be empty)  
     - *Pattern matching* (e.g., name should contain only letters)  

3. *Prevents Bad Data from Entering the Database*  
   - Even if someone inserts data directly into MongoDB (outside the API), the schema will block invalid entries.  

4. *Supports Default Values & Unique Fields*  
   - You can set *default values* (e.g., if no profile picture is uploaded, use a default one).  
   - You can enforce *unique fields* (e.g., prevent duplicate emails).  

************************************************Can We Skip Schema Validation?***********************************************
- If we use an external validation library (like Joi or express-validator) and validate *before inserting into MongoDB*, we can set { strict: false } in Mongoose.  
- But this is *not recommended* because it makes the database unstructured.  

*********************************************************Final Answer:*********************************************************
Even if we validate in the API, *Mongoose schema is still needed* for extra protection and data consistency. ðŸš€